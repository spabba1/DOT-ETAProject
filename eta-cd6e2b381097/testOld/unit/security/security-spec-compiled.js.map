{"version":3,"sources":["security-spec.js"],"names":[],"mappings":";;AAAA,QAAQ,CAAC,6BAA6B,EAAE,YAAY;AAChD,QAAI,YAAY,EAAE,UAAU,EAAE,gBAAgB,EAAE,kBAAkB,CAAC;;;AAGnE,cAAU,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;;AAE1B,cAAU,CAAC,MAAM,CAAC,UAAS,SAAS,EAAE;;AAElC,oBAAY,GAAG,SAAS,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;;AAE7C,0BAAkB,GAAG,YAAY,CAAC,IAAI,CAC9B,KAAK,EACL,0BAA0B,CAC7B,CACA,OAAO,CAAC;AACjB,oBAAQ,EAAE,WAAW;AACrB,mBAAO,EAAE,MAAM;SACd,CAAC,CAAC;;;AAGC,kBAAU,GAAG,SAAS,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;;AAEzC,YAAI,WAAW,GAAG,SAAS,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;;AAE/C,wBAAgB,GAAG,YAAY;AAC3B,mBAAO,WAAW,CAAC,iBAAiB,EAAE,EAAC,QAAQ,EAAG,UAAU,EAAE,CAAC,CAAC;SACnE,CAAC;KACL,CAAC,CAAC,CAAC;;AAEJ,aAAS,CAAC,YAAY;AAClB,oBAAY,CAAC,4BAA4B,EAAE,CAAC;AAC5C,oBAAY,CAAC,0BAA0B,EAAE,CAAC;KAChD,CAAC,CAAC;;AAGA,MAAE,CAAC,qBAAqB,EAAE,YAAY;AACxC,eAAO,CAAC,KAAK,EAAE,CAAC;AACV,oBAAY,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;AACnC,YAAI,UAAU,GAAG,gBAAgB,EAAE,CAAC;AACpC,oBAAY,CAAC,KAAK,EAAE,CAAC;KACxB,CAAC,CAAC;;AAEH,MAAE,CAAC,4BAA4B,EAAE,YAAY;;;AAGzC,0BAAkB,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;;AAEpC,oBAAY,CAAC,SAAS,CAAC,0BAA0B,CAAC,CAAC;AACnD,YAAI,UAAU,GAAG,gBAAgB,EAAE,CAAC;AACpC,oBAAY,CAAC,KAAK,EAAE,CAAC;AACrB,cAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;KAC/C,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;;CAkCN,CAAC,CAAC","file":"security-spec-compiled.js","sourcesContent":["describe(\"Authentication capabilities\", function () {\n    var $httpBackend, $rootScope, createController, authRequestHandler;\n\n    // set up the module\n    beforeEach(module('eta'));\n\n    beforeEach(inject(function($injector) {\n        // Set up the mock http service responses\n        $httpBackend = $injector.get('$httpBackend');\n        // backend definition common for all tests\n        authRequestHandler = $httpBackend.when(\n                'GET',\n                'model/services/login.cfc'\n            )\n            .respond({\n\t\t\t\tuserInfo: 'issdtest1',\n\t\t\t\tgetRole: 'User'\n\t\t\t\t});\n\n        // Get hold of a scope (i.e. the root scope)\n        $rootScope = $injector.get('$rootScope');\n        // The $controller service is used to create instances of controllers\n        var $controller = $injector.get('$controller');\n\n        createController = function () {\n            return $controller('LoginController', {'$scope' : $rootScope });\n        };\n    }));\n\n    afterEach(function () {\n        $httpBackend.verifyNoOutstandingException();\n        $httpBackend.verifyNoOutstandingRequest();\n\t});\n\n\n    it('should authenticate', function () {\n\t\tbrowser.pause();\n        $httpBackend.expectGET('/#/login');\n        var controller = createController();\n        $httpBackend.flush();\n    });\n\n    it('should fail authentication', function () {\n\n        // Notice how you can change the response even after it was set\n        authRequestHandler.respond(401, '');\n\n        $httpBackend.expectGET('model/services/login.cfc');\n        var controller = createController();\n        $httpBackend.flush();\n        expect($rootScope.status).toBe('Failed...');\n    });\n\n\n\n    /*it('should send auth header', function () {\n        var controller = createController();\n        $httpBackend.flush();\n\n        $httpBackend.expectPOST('*/\n\n\n\n\n\n\n\n\n\t//var httpBackendMock = function () {\n            //angular.module('httpBackendMock', ['ngMockE2E', 'myApp'])\n        //.run(function ($httpBackend) {\n            //var authenticated = false;\n            //var testAccount = {\n                //username: 'testuser',\n                //password: 'testpassword'\n            //};\n\n\t\t//$httpBackend.whenPOST('model/services/login.cfc')\n            //.respond(function (method, url, data, headers) {\n                //return authenticated ?\n                    //[200, testAccount, {}] :\n                    //[401, {}, {}];\n\t\t//});\n\n\n});\n"]}